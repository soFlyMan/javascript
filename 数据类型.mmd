javaScript深入浅出

### 数据类型

- 基本类型
- 引用类型

#### 包装对象
```
var str="string";
var strObj=new String("String")
str //string
strObj //String {0: "s", 1: "t", 2: "r", 3: "i", 4: "n", 5: "g", length: 6, [[PrimitiveValue]]: "string"}
```
str是string(基本类型)，本身是没有方法的。



当尝试把基本类型的str当做对象一样访问时，例如：str.length; 

解释器会创建一个临时的包装对象，伪代码：
```
[[tempObj]] = new String(str);

[[tempObj]].length; // 返回具体的length;

delete [[tempObj]]; // 销毁临时对象

```

重复访问str.length会重复创建这个临时对象。

所以str.t赋值可以成功，但再次访问str.t返回undefined，因为每次创建的临时包装对象都是不同的。

#### js类型检测

- typeof
- instanceof
- Object.property.toString
- constructor
- duck type

**typeof**

函数对象和基本类型的判断

typeof 100 //number 
typeof null //object (历史原因)
typeof NaN  //number

**obj instanceof Object**

判断对象类型(Array..) 基于原型链的判断操作符

```
[1,2] instanceof Array===true;
new Object() instanceofArray===false;

function Person(){};
function Student(){};
Student.prototype=new Person(); //Person{}
Student.prototype.constructor=Student; //function Student();
var bosn=new Student();
bosn instanceof Student; //true
var one=new Person();
one instanceof Person; //true
one instanceof Student;//false
bosn instanceof Person;//true
```
js是按引用判断对象

Caution 不同window或iframe间的对象类型检测不能使用instanceof

**Object.prototype.toString**

```
Object.prototype.toString.apply([]); ==="[object Array]";
```


#### 运算符
- in
- typeof instanceof
- delete
- new
- this
```
```

**function**
```
//这种方式编译后函数声明和它的赋值都会被提前
fd();//true
function fd(){
    return true;
}

fe();//false
var fe=function(){

};
```

#### Array
push() //添加数组元素

pop() //删除数组中最后一个元素

shift() //移除数组中第一个元素

unshift() //在数组最前面添加元素    unshift(1,2,3)

concat()    连接两个或更多的数组，并返回结果。

join()  把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔。

pop()   删除并返回数组的最后一个元素

push()  向数组的末尾添加一个或更多元素，并返回新的长度。

reverse()   颠倒数组中元素的顺序。

shift() 删除并返回数组的第一个元素

slice() 从某个已有的数组返回选定的元素

sort()  对数组的元素进行排序

splice()    删除元素，并向数组添加新元素。

toSource()  返回该对象的源代码。

toString()  把数组转换为字符串，并返回结果。

toLocaleString()    把数组转换为本地数组，并返回结果。

unshift()   向数组的开头添加一个或更多元素，并返回新的长度。

valueOf()   返回数组对象的原始值

####属性
使用变量表示属性时需要 Use bracket notation

####math
**随机数**

abs(x)  返回数的绝对值。

acos(x) 返回数的反余弦值。

asin(x) 返回数的反正弦值。

atan(x) 以介于 -PI/2 与 PI/2 弧度之间的数值来返回 x 的反正切值。

atan2(y,x)  返回从 x 轴到点 (x,y) 的角度（介于 -PI/2 与 PI/2 弧度之间）。

ceil(x) 对数进行上舍入。

cos(x)  返回数的余弦。

exp(x)  返回 e 的指数。

floor(x)    对数进行下舍入。

log(x)  返回数的自然对数（底为e）。

max(x,y)    返回 x 和 y 中的最高值。

min(x,y)    返回 x 和 y 中的最低值。

pow(x,y)    返回 x 的 y 次幂。

random()    返回 0 ~ 1 之间的随机数。

round(x)    把数四舍五入为最接近的整数。

sin(x)  返回数的正弦。

sqrt(x) 返回数的平方根。

tan(x)  返回角的正切。

toSource()  返回该对象的源代码。

valueOf()   返回 Math 对象的原始值。

Math.floor() 
方法执行的是向下取整计算，它返回的是小于或等于函数参数，并且与之最接近的整数。



####正则
\s 空格

\d 数字

\S 匹配非空格