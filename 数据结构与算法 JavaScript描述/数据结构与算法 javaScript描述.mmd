# 数据结构与算法 javaScript描述

## 数组

###由字符串生成数组
split()
```
var sentence="the quick brown fox jumped over the lazy dog";
var words=sentence.split(" ");
for(var i=0;i<words.length;i++){
    console.log("word"+i+":"+words[i]);
}
```
### 对数组的整体性操作

*浅复制*

当把一个数组赋给另外一个数组时，只是为被赋值的数组增加了一个新的引用。
```
samewords=words;
words[0]=100;
samewords[0]; //100

```

*深复制*
```
function copy(arr1,arr2){
for(var i=0;i<arr1.length;i++){
    arr2[i]=arr1[i];
}
}
```

- 存取函数

**查找函数**

indexof()
lastindexof()
```
function findElement(name) {
    var position=words.indexOf(name);
    if(position>=0){
        console.log("found"+name+" at position "+position);
    }else{
        console.log(name+ " not found!");
    }

}
findElement("brown"); //found brown at position 2
findElement("soFly");//soFly not found! -1
```

**数组的字符串表示**

join('asdasd') toString()

**由已有数组创建新数组**

- concat() 
合并多个数组创建一个新数组
- splice(a,b) 
a:起始索引 b：截取长度
截取一个数组的子集创建一个新数组，还可以为一个数组增加或移除元素

**splice(3,0,newElements)**
从数组的中间位置添加和删除元素

**数组排序**

reverse() //将数组中元素的顺序进行翻转
sort() //按照字典顺序进行排序

如果想要按照顺序进行排序需要调入大小比较函数
```
function compare(num1,num2) {
    return num1-num2;

}
var numsort=[3,1,2,100,4,200];
numsort.sort(compare);
console.log(numsort); //[ 1, 2, 3, 4, 100, 200 ]
```

###迭代器方法

- 不生成新数组的迭代器方法

- forEach()
```
function square(num) {
    console.log(num,num*num)
}
numsort.forEach(square); 
//
1 1
2 4
3 9
4 16
100 10000
200 40000

```
- every()

对数组中的每个元素使用该函数，返回值为boolean

- some()

只要有一个函数返回true，该方法就返回true

- reduce()
 接受一个函数，返回一个值 *从左到右*

```
 function add(runningTotal,currentTotal) {
    return runningTotal+currentTotal;
}
var numadd=numsort.reduce(add);
console.log(numadd); //310
//连接字符串
function concatStr(x,y){
    return x+" "+y;
}
words=words.splice(3,9);
console.log(words.reduce(concatStr)); //the quick brown fox jumped over the lazy dog
```

- reduceRight() 
*从右向左*执行

- 生成新数组的迭代器方法

map()  //forEach
对元素中每个元素都使用函数 返回一个新数组

filter()  //every()  当所有的结果均为true时，返回一个数组


```
//过滤字符串数组
function afterc(str){
    if(str.indexOf("o")>-1){
        return true;
    }
    return false;

}
var misspelled=words.filter(afterc);
console.log(misspelled.join(" "));

//brown fox over dog
```

## 二维和多维数组
Array.matrix(5,5,0)

## 对象数组
*parseInt(string, radix) 函数可解析一个字符串，并返回一个整数。*